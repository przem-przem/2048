{"mappings":"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","sources":["src/index.js"],"sourcesContent":["const GRID_SIZE = 4;\r\nconst CELL_SIZE = 20;\r\nconst CELL_GAP = 2;\r\n\r\nconst gameBoard = document.getElementById(\"game-board\");\r\n\r\nconsole.log(gameBoard);\r\n\r\n\r\n\r\n\r\n\r\nclass Grid {\r\n  #cells\r\n\r\n  constructor(gridElement) {\r\n\r\n    gridElement.style.setProperty(\"--grid-size\", GRID_SIZE);\r\n    gridElement.style.setProperty(\"--cell-size\", `${CELL_SIZE}vmin`);\r\n    gridElement.style.setProperty(\"--cell-gap\", `${CELL_GAP}vmin`);\r\n\r\n    /* Creates the array of cell divs and maps into array of Cell objects */\r\n    this.#cells = createCellElement(gridElement)\r\n      .map((el, index) => {\r\n        return new Cell(\r\n          el,\r\n          index % GRID_SIZE,\r\n          Math.floor(index / GRID_SIZE));\r\n      })\r\n\r\n  }\r\n\r\n  get cellsByColumn() {\r\n    return this.#cells.reduce((cellGrid, cell) => {\r\n      cellGrid[cell.x] = cellGrid[cell.x] || []\r\n      cellGrid[cell.x][cell.y] = cell;\r\n      return cellGrid;\r\n    }, [])\r\n  }\r\n\r\n  get cellsByRow() {\r\n    return this.#cells.reduce((cellGrid, cell) => {\r\n      cellGrid[cell.y] = cellGrid[cell.y] || []\r\n      cellGrid[cell.y][cell.x] = cell;\r\n      return cellGrid;\r\n    }, [])\r\n  }\r\n\r\n  get cells() {\r\n    return this.#cells;\r\n  }\r\n\r\n  get #emptyCells() {\r\n    return this.#cells.filter(cell => cell.tile == null);\r\n  }\r\n\r\n  randomEmptyCell() {\r\n    const randomIndex = Math.floor(Math.random() * this.#emptyCells.length);\r\n    return this.#emptyCells[randomIndex];\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Cell {\r\n  #cellElement\r\n  #x\r\n  #y\r\n  #tile\r\n  #mergeTile\r\n\r\n  constructor(cellElement, x, y) {\r\n    this.#cellElement = cellElement;\r\n    this.#x = x;\r\n    this.#y = y;\r\n  }\r\n\r\n  get x() {\r\n    return this.#x;\r\n  }\r\n\r\n  get y() {\r\n    return this.#y;\r\n  }\r\n\r\n  get tile(){\r\n    return this.#tile;\r\n  }\r\n\r\n  get mergeTile() {\r\n    return this.#mergeTile;\r\n  }\r\n\r\n  set mergeTile(value) {\r\n    this.#mergeTile = value;\r\n    if (value == null) return;\r\n    this.#mergeTile.x = this.#x;\r\n    this.#mergeTile.y = this.#y;\r\n  }\r\n\r\n  set tile (value){\r\n    this.#tile = value;\r\n    if (value == null) return;\r\n    this.#tile.x = this.#x;\r\n    this.#tile.y = this.#y;\r\n  }\r\n\r\n  canAccept(tile) {\r\n    return (this.tile == null ||\r\n      (this.mergeTile == null && this.tile.value === tile.value));\r\n  }\r\n\r\n  mergeTiles() {\r\n    if(this.mergeTile == null || this.tile == null) return;\r\n    this.tile.value = this.tile.value + this.mergeTile.value;\r\n    this.mergeTile.remove();\r\n    this.mergeTile = null;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass Tile {\r\n  #tileElement\r\n  #x\r\n  #y\r\n  #value\r\n\r\n  constructor (tileContainer, value = Math.random() > 0.5 ? 2 : 4){\r\n    this.#tileElement = document.createElement(\"div\");\r\n    this.#tileElement.classList.add(\"tile\");\r\n    tileContainer.append(this.#tileElement);\r\n    this.value = value;\r\n  }\r\n\r\n\r\n  set x (position){\r\n    this.#x = position\r\n    this.#tileElement.style.setProperty(\"--x\", position);\r\n  }\r\n\r\n\r\n  set y (position){\r\n    this.#y = position\r\n    this.#tileElement.style.setProperty(\"--y\", position);\r\n  }\r\n\r\n  get value (){\r\n    return this.#value;\r\n  }\r\n\r\n\r\n  set value (v) {\r\n    this.#value = v;\r\n    this.#tileElement.textContent = v;\r\n    const power = Math.log2(v);\r\n    const backgroundLightness = 100 - power * 9;\r\n    this.#tileElement.style.setProperty(\r\n      \"--background-lightness\",\r\n      `${backgroundLightness}%`\r\n    );\r\n    this.#tileElement.style.setProperty(\r\n      \"--text-lightness\",\r\n      `${backgroundLightness <= 50 ? 90 : 10}%`\r\n    );\r\n  }\r\n\r\n  remove() {\r\n    this.#tileElement.remove();\r\n  }\r\n\r\n  waitForTransition(animation = false) {\r\n    return new Promise(resolve => {\r\n      this.#tileElement.addEventListener(\r\n        animation ? \"animationend\" : \"transitionend\",\r\n        resolve, {\r\n        once: true,\r\n      })\r\n    })\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst createCellElement = gridElement => {\r\n  const cells = [];\r\n\r\n  for (let i = 0; i < GRID_SIZE * GRID_SIZE; i++) {\r\n\r\n    const cell = document.createElement(\"div\");\r\n    cell.classList.add(\"cell\");\r\n    cells.push(cell);\r\n    gridElement.append(cell);\r\n\r\n  }\r\n  return cells;\r\n}\r\n\r\n\r\n\r\nconst setupInput = () => {\r\n  window.addEventListener(\"keydown\", handlerInput, {once: true});\r\n}\r\n\r\nconst handlerInput = async e => {\r\n  switch (e.key){\r\n    case \"ArrowUp\":\r\n    if (!canMoveUp()){\r\n      setupInput();\r\n      return;\r\n    }\r\n      await moveUp();\r\n      break;\r\n\r\n    case \"ArrowDown\":\r\n    if (!canMoveDown()){\r\n      setupInput();\r\n      return;\r\n    }\r\n      await moveDown();\r\n      break;\r\n\r\n    case \"ArrowLeft\":\r\n    if (!canMoveLeft()){\r\n      setupInput();\r\n      return;\r\n    }\r\n      await moveLeft();\r\n      break;\r\n\r\n    case \"ArrowRight\":\r\n    if (!canMoveRight()){\r\n      setupInput();\r\n      return;\r\n    }\r\n      await moveRight();\r\n      break;\r\n\r\n    default:\r\n      setupInput();\r\n      return;\r\n  }\r\n\r\n  grid.cells.forEach(cell => cell.mergeTiles());\r\n  const newTile = new Tile(gameBoard);\r\n  grid.randomEmptyCell().tile = newTile;\r\n\r\n  if(!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()){\r\n    newTile.waitForTransition(true).then(() => {\r\n      alert(\"You lose\");\r\n    })\r\n  } else {\r\n    setupInput();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nconst moveUp = () => {\r\n  slideTiles(grid.cellsByColumn);\r\n}\r\n\r\nconst moveLeft = () => {\r\n  slideTiles(grid.cellsByRow);\r\n}\r\n\r\nconst moveDown = () => {\r\n  slideTiles(grid.cellsByColumn.map(column => [...column].reverse()));\r\n}\r\n\r\nconst moveRight = () => {\r\n  slideTiles(grid.cellsByRow.map(row => [...row].reverse()));\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst slideTiles = (cells) => {\r\n  return Promise.all(\r\n  cells.flatMap(group => {\r\n    const promises = [];\r\n    for (let i = 1; i < group.length; i++) {\r\n      const cell = group[i];\r\n      if (cell.tile == null) continue;\r\n      let lastValidCell;\r\n      for (let j = i - 1; j >= 0; j--){\r\n        const moveToCell = group[j];\r\n        if (!moveToCell.canAccept(cell.tile)) break;\r\n        lastValidCell = moveToCell;\r\n      }\r\n\r\n      if (lastValidCell != null){\r\n        promises.push(cell.tile.waitForTransition());\r\n        if (lastValidCell.tile != null){\r\n          lastValidCell.mergeTile = cell.tile;\r\n        } else {\r\n          lastValidCell.tile = cell.tile;\r\n        }\r\n        cell.tile = null;\r\n      }\r\n    }\r\n    return promises;\r\n  }))\r\n}\r\n\r\n\r\nconst canMoveUp = () => {\r\n  return canMove(grid.cellsByColumn);\r\n}\r\n\r\nconst canMoveDown = () => {\r\n  return canMove(grid.cellsByColumn.map(column => [...column].reverse()));\r\n}\r\n\r\nconst canMoveLeft = () => {\r\n  return canMove(grid.cellsByRow);\r\n}\r\n\r\nconst canMoveRight = () => {\r\n  return canMove(grid.cellsByRow.map(row => [...row].reverse()));\r\n}\r\n\r\nconst canMove = cells => {\r\n  return cells.some(group => {\r\n    return group.some((cell, index) => {\r\n      if(index == 0) return false;\r\n      if (cell.tile == null) return false;\r\n      const moveToCell = group[index - 1];\r\n      return moveToCell.canAccept(cell.tile);\r\n    })\r\n  })\r\n}\r\n\r\n\r\n\r\nconst grid = new Grid(gameBoard);\r\n\r\nconsole.log(grid.randomEmptyCell());\r\n\r\ngrid.randomEmptyCell().tile = new Tile (gameBoard);\r\ngrid.randomEmptyCell().tile = new Tile (gameBoard);\r\nconsole.log(grid.cellsByColumn);\r\n\r\nsetupInput();\r\n"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}