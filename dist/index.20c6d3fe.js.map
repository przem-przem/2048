{"mappings":"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","sources":["src/js/Cell.js","src/js/Grid.js","src/js/Tile.js","src/js/main.js"],"sourcesContent":["let SCORE = 0;\r\nconst scoreElement = document.getElementById(\"score\");\r\n\r\nexport default class Cell {\r\n  #cellElement\r\n  #x\r\n  #y\r\n  #tile\r\n  #mergeTile\r\n\r\n  constructor(cellElement, x, y) {\r\n    this.#cellElement = cellElement;\r\n    this.#x = x;\r\n    this.#y = y;\r\n  }\r\n\r\n  get x() {\r\n    return this.#x;\r\n  }\r\n\r\n  get y() {\r\n    return this.#y;\r\n  }\r\n\r\n  get tile(){\r\n    return this.#tile;\r\n  }\r\n\r\n  get mergeTile() {\r\n    return this.#mergeTile;\r\n  }\r\n\r\n  set mergeTile(value) {\r\n    this.#mergeTile = value;\r\n    if (value == null) return;\r\n    this.#mergeTile.x = this.#x;\r\n    this.#mergeTile.y = this.#y;\r\n  }\r\n\r\n  set tile (value){\r\n    this.#tile = value;\r\n    if (value == null) return;\r\n    this.#tile.x = this.#x;\r\n    this.#tile.y = this.#y;\r\n  }\r\n\r\n  canAccept(tile) {\r\n    return (this.tile == null ||\r\n      (this.mergeTile == null && this.tile.value === tile.value));\r\n  }\r\n\r\n  mergeTiles() {\r\n    if(this.mergeTile == null || this.tile == null) return;\r\n    this.tile.value = this.tile.value + this.mergeTile.value;\r\n    if (typeof this.tile.value == \"number\"){\r\n      updateScore(this.tile.value);\r\n    }\r\n\r\n    this.mergeTile.remove();\r\n    this.mergeTile = null;\r\n  }\r\n}\r\n\r\n\r\n\r\nconst updateScore = (value) => {\r\n  SCORE = SCORE + value;\r\n  scoreElement.innerHTML = `Score:  ${SCORE}`;\r\n}\r\n","import Cell from \"./Cell.js\";\r\n\r\n\r\nconst GRID_SIZE = 4;\r\nconst CELL_SIZE = 15;\r\nconst CELL_GAP = 2;\r\n\r\n\r\n\r\nexport default class Grid {\r\n  #cells\r\n\r\n  constructor(gridElement) {\r\n\r\n    gridElement.style.setProperty(\"--grid-size\", GRID_SIZE);\r\n    gridElement.style.setProperty(\"--cell-size\", `${CELL_SIZE}vmin`);\r\n    gridElement.style.setProperty(\"--cell-gap\", `${CELL_GAP}vmin`);\r\n\r\n    /* Creates the array of cell divs and maps into array of Cell objects */\r\n    this.#cells = createCellElement(gridElement)\r\n      .map((el, index) => {\r\n        return new Cell(\r\n          el,\r\n          index % GRID_SIZE,\r\n          Math.floor(index / GRID_SIZE));\r\n      })\r\n\r\n  }\r\n\r\n  get cellsByColumn() {\r\n    return this.#cells.reduce((cellGrid, cell) => {\r\n      cellGrid[cell.x] = cellGrid[cell.x] || []\r\n      cellGrid[cell.x][cell.y] = cell;\r\n      return cellGrid;\r\n    }, [])\r\n  }\r\n\r\n  get cellsByRow() {\r\n    return this.#cells.reduce((cellGrid, cell) => {\r\n      cellGrid[cell.y] = cellGrid[cell.y] || []\r\n      cellGrid[cell.y][cell.x] = cell;\r\n      return cellGrid;\r\n    }, [])\r\n  }\r\n\r\n  get cells() {\r\n    return this.#cells;\r\n  }\r\n\r\n  get #emptyCells() {\r\n    return this.#cells.filter(cell => cell.tile == null);\r\n  }\r\n\r\n  randomEmptyCell() {\r\n    const randomIndex = Math.floor(Math.random() * this.#emptyCells.length);\r\n    return this.#emptyCells[randomIndex];\r\n  }\r\n}\r\n\r\n\r\nconst createCellElement = gridElement => {\r\n  const cells = [];\r\n\r\n  for (let i = 0; i < GRID_SIZE * GRID_SIZE; i++) {\r\n\r\n    const cell = document.createElement(\"div\");\r\n    cell.classList.add(\"cell\");\r\n    cells.push(cell);\r\n    gridElement.append(cell);\r\n\r\n  }\r\n  return cells;\r\n}\r\n","const tileColors = ['#a7d0cd', '#b8c0b8', '#bfb2a7', '#c1a49a', '#bf988f', '#b98c86', '#b18180', '#a7787c', '#9a6f7a', '#8c6779', '#7b6079']\r\n\r\n\r\nexport default class Tile {\r\n  #tileElement\r\n  #x\r\n  #y\r\n  #value\r\n\r\n  constructor (tileContainer, value = Math.random() > 0.5 ? 3 : 6){\r\n    this.#tileElement = document.createElement(\"div\");\r\n    this.#tileElement.classList.add(\"tile\");\r\n    tileContainer.append(this.#tileElement);\r\n    this.value = value;\r\n  }\r\n\r\n\r\n  set x (position){\r\n    this.#x = position\r\n    this.#tileElement.style.setProperty(\"--x\", position);\r\n  }\r\n\r\n\r\n  set y (position){\r\n    this.#y = position\r\n    this.#tileElement.style.setProperty(\"--y\", position);\r\n  }\r\n\r\n  get value (){\r\n    return this.#value;\r\n  }\r\n\r\n\r\n  set value (v) {\r\n    this.#value = v;\r\n    this.#tileElement.textContent = v;\r\n    const power = Math.log2(v);\r\n    const index = Math.floor(power);\r\n    this.#tileElement.style.setProperty(\r\n      \"background-color\",\r\n      tileColors[index-1]\r\n    );\r\n    if (index >= 8){\r\n      this.#tileElement.style.setProperty(\r\n       \"color\",\r\n        \"#F5F5F5\"\r\n      );\r\n    }\r\n  }\r\n\r\n  remove() {\r\n    this.#tileElement.remove();\r\n  }\r\n\r\n  waitForTransition(animation = false) {\r\n    return new Promise(resolve => {\r\n      this.#tileElement.addEventListener(\r\n        animation ? \"animationend\" : \"transitionend\",\r\n        resolve, {\r\n        once: true,\r\n      })\r\n    })\r\n  }\r\n\r\n}\r\n","import Grid from \"./Grid.js\";\r\nimport Cell from \"./Cell.js\";\r\nimport Tile from \"./Tile.js\";\r\nimport InputHandler from \"./InputHandler.js\";\r\nimport Settings from \"./Settings.js\";\r\n\r\n\r\n\r\nconst gameBoard = document.getElementById(\"game-board\");\r\n\r\n\r\n\r\nconst setupInput = () => {\r\n  window.addEventListener(\"keydown\", handlerInput, {once: true});\r\n}\r\n\r\nlet touches = [[], []];\r\n\r\ngameBoard.addEventListener(\"touchstart\", function (ev) {\r\n  touches[0].push(ev.changedTouches[0].screenX);\r\n  touches[1].push(ev.changedTouches[0].screenY);\r\n})\r\n\r\ngameBoard.addEventListener(\"touchend\", function (ev) {\r\n  touches[0].push(ev.changedTouches[0].screenX);\r\n  touches[1].push(ev.changedTouches[0].screenY);\r\n  const direction = determineTouchDirection();\r\n  handlerInput(direction);\r\n})\r\n\r\n\r\nconst determineTouchDirection = () => {\r\n  console.log(touches[0]);\r\n  console.log(touches[1]);\r\n\r\n  /* Distance in X direction */\r\n  const distanceX = touches[0][1] - touches [0][0];\r\n  console.log(distanceX);\r\n\r\n  /* Distance in Y direction */\r\n  const distanceY = touches[1][1] - touches [1][0];\r\n  console.log(distanceY);\r\n\r\n  /* if Y distance is bigger than X distance, then vertical direction */\r\n  if (Math.abs(distanceX) > Math.abs(distanceY)){\r\n\r\n    if (distanceX > 0) return \"ArrowRight\";\r\n    else return \"ArrowLeft\";\r\n\r\n  } else {\r\n\r\n    if (distanceY > 0) return \"ArrowDown\";\r\n    else return \"ArrowUp\";\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nconst handlerInput = async e => {\r\n\r\n  let direction;\r\n\r\n\r\n  if (typeof e == \"object\"){\r\n    direction = e.key;\r\n  } else if (typeof e == \"string\"){\r\n    direction = e;\r\n  }\r\n\r\n  console.log(direction);\r\n\r\n\r\n  switch (direction){\r\n    case \"ArrowUp\":\r\n    if (!canMoveUp()){\r\n      setupInput();\r\n      return;\r\n    }\r\n      await moveUp();\r\n      break;\r\n\r\n\r\n    case \"ArrowDown\":\r\n    if (!canMoveDown()){\r\n      setupInput();\r\n      return;\r\n    }\r\n      await moveDown();\r\n      break;\r\n\r\n\r\n    case \"ArrowLeft\":\r\n    if (!canMoveLeft()){\r\n      setupInput();\r\n      return;\r\n    }\r\n      await moveLeft();\r\n      break;\r\n\r\n\r\n    case \"ArrowRight\":\r\n    if (!canMoveRight()){\r\n      setupInput();\r\n      return;\r\n    }\r\n      await moveRight();\r\n      break;\r\n\r\n\r\n    default:\r\n      setupInput();\r\n      return;\r\n  }\r\n\r\n\r\n  grid.cells.forEach(cell => cell.mergeTiles());\r\n  const newTile = new Tile(gameBoard);\r\n  grid.randomEmptyCell().tile = newTile;\r\n\r\n  touches = [[], []];\r\n\r\n\r\n  if(!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()){\r\n    newTile.waitForTransition(true).then(() => {\r\n      alert(\"You lose\");\r\n    })\r\n  } else {\r\n    setupInput();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nconst moveUp = () => {\r\n  slideTiles(grid.cellsByColumn);\r\n}\r\n\r\nconst moveLeft = () => {\r\n  slideTiles(grid.cellsByRow);\r\n}\r\n\r\nconst moveDown = () => {\r\n  slideTiles(grid.cellsByColumn.map(column => [...column].reverse()));\r\n}\r\n\r\nconst moveRight = () => {\r\n  slideTiles(grid.cellsByRow.map(row => [...row].reverse()));\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst slideTiles = (cells) => {\r\n  return Promise.all(\r\n\r\n  cells.flatMap(group => {\r\n    const promises = [];\r\n    for (let i = 1; i < group.length; i++) {\r\n      const cell = group[i];\r\n      if (cell.tile == null) continue;\r\n      let lastValidCell;\r\n      for (let j = i - 1; j >= 0; j--){\r\n        const moveToCell = group[j];\r\n        if (!moveToCell.canAccept(cell.tile)) break;\r\n        lastValidCell = moveToCell;\r\n      }\r\n\r\n      if (lastValidCell != null){\r\n        promises.push(cell.tile.waitForTransition());\r\n        if (lastValidCell.tile != null){\r\n          lastValidCell.mergeTile = cell.tile;\r\n        } else {\r\n          lastValidCell.tile = cell.tile;\r\n        }\r\n        cell.tile = null;\r\n      }\r\n    }\r\n    return promises;\r\n  }))\r\n}\r\n\r\n\r\nconst canMoveUp = () => {\r\n  return canMove(grid.cellsByColumn);\r\n}\r\n\r\nconst canMoveDown = () => {\r\n  return canMove(grid.cellsByColumn.map(column => [...column].reverse()));\r\n}\r\n\r\nconst canMoveLeft = () => {\r\n  return canMove(grid.cellsByRow);\r\n}\r\n\r\nconst canMoveRight = () => {\r\n  return canMove(grid.cellsByRow.map(row => [...row].reverse()));\r\n}\r\n\r\nconst canMove = cells => {\r\n  return cells.some(group => {\r\n    return group.some((cell, index) => {\r\n      if(index == 0) return false;\r\n      if (cell.tile == null) return false;\r\n      const moveToCell = group[index - 1];\r\n      return moveToCell.canAccept(cell.tile);\r\n    })\r\n  })\r\n}\r\n\r\n\r\n\r\nconst grid = new Grid(gameBoard);\r\n\r\n\r\ngrid.randomEmptyCell().tile = new Tile(gameBoard);\r\ngrid.randomEmptyCell().tile = new Tile(gameBoard);\r\n\r\n\r\nsetupInput();\r\n"],"names":["$9370f090a1e03025$var$SCORE","$9370f090a1e03025$var$scoreElement","document","getElementById","cellElement","x","y","tile","mergeTile","this","value","canAccept","mergeTiles","$9370f090a1e03025$var$updateScore","remove","innerHTML","$a781f2de18c05b26$var$createCellElement","gridElement","cells","i","$a781f2de18c05b26$var$GRID_SIZE","cell","createElement","classList","add","push","append","$51c6b31e76ea7e02$var$tileColors","tileElement","tileContainer","Math","random","position","style","setProperty","v","textContent","power","log2","index","floor","waitForTransition","animation","Promise","resolve","addEventListener","once","$54b47fc030b7b21e$var$gameBoard","$54b47fc030b7b21e$var$setupInput","window","$54b47fc030b7b21e$var$handlerInput","$54b47fc030b7b21e$var$touches","ev","changedTouches","screenX","screenY","direction","$54b47fc030b7b21e$var$determineTouchDirection","console","log","distanceX","distanceY","abs","async","e","key","$54b47fc030b7b21e$var$canMoveUp","$54b47fc030b7b21e$var$moveUp","$54b47fc030b7b21e$var$canMoveDown","$54b47fc030b7b21e$var$moveDown","$54b47fc030b7b21e$var$canMoveLeft","$54b47fc030b7b21e$var$moveLeft","$54b47fc030b7b21e$var$canMoveRight","$54b47fc030b7b21e$var$moveRight","$54b47fc030b7b21e$var$grid","forEach","newTile","$51c6b31e76ea7e02$export$2e2bcd8739ae039","randomEmptyCell","then","alert","$54b47fc030b7b21e$var$slideTiles","cellsByColumn","cellsByRow","map","column","reverse","row","all","flatMap","group","promises","length","lastValidCell","j","moveToCell","$54b47fc030b7b21e$var$canMove","some","el","$9370f090a1e03025$export$2e2bcd8739ae039","reduce","cellGrid","emptyCells","filter","randomIndex"],"version":3,"file":"index.20c6d3fe.js.map"}