{"mappings":"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","sources":["src/js/EndgameHandler.js","src/js/Tile.js","src/js/InputHandler.js","src/js/Cell.js","src/js/Grid.js","src/js/Settings.js","src/js/main.js","src/js/Darkmode.js"],"sourcesContent":["import {endGameBoard, endGameTitle, endgameScore, hiddenClass} from \"./main\";\r\nimport {SCORE} from \"./Cell\";\r\n\r\nexport const endGame = outcome => {\r\n\r\n  if(outcome) {\r\n    endGameTitle.innerHTML = \"You win :)\";\r\n  } else {\r\n    endGameTitle.innerHTML = \"You lose :(\";\r\n  }\r\n\r\n  endGameBoard.classList.remove(hiddenClass);\r\n  endgameScore.innerHTML = `Your score:  ${SCORE}`;\r\n\r\n}\r\n\r\nexport const endGameScoreUpdate = () => {\r\n    endgameScore.innerHTML = `Your score:  ${SCORE}`;\r\n}\r\n","const tileColors = ['#a7d0cd', '#b8c0b8', '#bfb2a7', '#c1a49a', '#bf988f', '#b98c86', '#b18180', '#a7787c', '#9a6f7a', '#8c6779', '#7b6079']\r\nimport {tile, gridSize, baseNumber} from \"./main\";\r\n\r\nexport default class Tile {\r\n  #tileElement\r\n  #x\r\n  #y\r\n  #value\r\n\r\n  constructor (tileContainer, value = Math.random() > 0.5 ? baseNumber : baseNumber * 2){\r\n    this.#tileElement = document.createElement(\"div\");\r\n    this.#tileElement.classList.add(\"tile\");\r\n    this.#tileElement.setAttribute(\"id\", \"tile\");\r\n    tileContainer.append(this.#tileElement);\r\n    this.value = value;\r\n  }\r\n\r\n\r\n  set x (position){\r\n    this.#x = position\r\n    this.#tileElement.style.setProperty(\"--x\", position);\r\n  }\r\n\r\n\r\n  set y (position){\r\n    this.#y = position\r\n    this.#tileElement.style.setProperty(\"--y\", position);\r\n  }\r\n\r\n  get value (){\r\n    return this.#value;\r\n  }\r\n\r\n\r\n  set value (v) {\r\n    this.#value = v;\r\n    this.#tileElement.textContent = v;\r\n    const power = Math.log2(v);\r\n    let index = Math.floor(power);\r\n    if (baseNumber == 2 || baseNumber == 3){\r\n      index = index - 1;\r\n    } else if (baseNumber >= 3 && baseNumber <= 7){\r\n      index = index - 2;\r\n    } else if (baseNumber >= 8){\r\n      index = index - 3;\r\n    }\r\n    this.#tileElement.style.setProperty(\r\n      \"background-color\",\r\n      tileColors[index]\r\n    );\r\n    if (index >= 8){\r\n      this.#tileElement.style.setProperty(\r\n       \"color\",\r\n        \"#F5F5F5\"\r\n      );\r\n    }\r\n    if (gridSize == 3){\r\n      this.#tileElement.style.setProperty(\"border-radius\", \"8vmin\");\r\n      this.#tileElement.style.setProperty(\"font-size\", \"6vmin\");\r\n    } else if (gridSize == 4){\r\n      this.#tileElement.style.setProperty(\"border-radius\", \"6vmin\");\r\n      this.#tileElement.style.setProperty(\"font-size\", \"5vmin\");\r\n    } else if (gridSize == 5){\r\n      this.#tileElement.style.setProperty(\"border-radius\", \"5vmin\");\r\n      this.#tileElement.style.setProperty(\"font-size\", \"4vmin\");\r\n    }\r\n\r\n  }\r\n\r\n  remove() {\r\n    this.#tileElement.remove();\r\n  }\r\n\r\n  waitForTransition(animation = false) {\r\n    return new Promise(resolve => {\r\n      this.#tileElement.addEventListener(\r\n        animation ? \"animationend\" : \"transitionend\",\r\n        resolve, {\r\n        once: true,\r\n      })\r\n    })\r\n  }\r\n\r\n}\r\n","import {\r\n  gameBoard,\r\n  setupInput,\r\n  touches,\r\n  endGameBoard,\r\n  hiddenClass,\r\n  maxtile,\r\n  openSettingsButton,\r\n  starterBoard,\r\n  main,\r\n  navData,\r\n  gridSize\r\n} from \"./main\";\r\nimport Grid from \"./Grid.js\";\r\nimport Tile from \"./Tile.js\";\r\nimport {\r\n  endGame,\r\n  endGameScoreUpdate\r\n} from \"./EndgameHandler.js\";\r\nimport {\r\n  SCORE\r\n} from \"./Cell.js\";\r\n\r\nlet MAX_TILE = 0;\r\nlet grid;\r\n\r\n\r\n\r\nexport const gamestart = () => {\r\n\r\n  openSettingsButton.classList.toggle(hiddenClass);\r\n  starterBoard.classList.toggle(hiddenClass);\r\n  main.classList.toggle(hiddenClass);\r\n  navData.classList.toggle(hiddenClass);\r\n\r\n  grid = new Grid(gameBoard, gridSize);\r\n  let newTile = new Tile(gameBoard);\r\n  MAX_TILE = newTile.value;\r\n  grid.randomEmptyCell().tile = newTile;\r\n\r\n  newTile = new Tile(gameBoard);\r\n  MAX_TILE = Math.max(MAX_TILE, newTile.value);\r\n  grid.randomEmptyCell().tile = newTile;\r\n  maxtile.innerHTML = `Max tile: ${MAX_TILE}`;\r\n\r\n  return grid;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const determineTouchDirection = () => {\r\n\r\n  /* Distance in X direction */\r\n  const distanceX = touches[0][1] - touches[0][0];\r\n\r\n\r\n  /* Distance in Y direction */\r\n  const distanceY = touches[1][1] - touches[1][0];\r\n\r\n\r\n  /* if Y distance is bigger than X distance, then vertical direction */\r\n  if (Math.abs(distanceX) > Math.abs(distanceY)) {\r\n\r\n    if (distanceX > 0) return \"ArrowRight\";\r\n    else return \"ArrowLeft\";\r\n\r\n  } else {\r\n\r\n    if (distanceY > 0) return \"ArrowDown\";\r\n    else return \"ArrowUp\";\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const handlerInput = async e => {\r\n\r\n  let direction;\r\n\r\n  if (typeof e == \"object\") {\r\n    direction = e.key;\r\n  } else if (typeof e == \"string\") {\r\n    direction = e;\r\n  }\r\n\r\n  switch (direction) {\r\n    case \"ArrowUp\":\r\n      if (!canMoveUp()) {\r\n        setupInput();\r\n        return;\r\n      }\r\n      await moveUp();\r\n      break;\r\n\r\n\r\n    case \"ArrowDown\":\r\n      if (!canMoveDown()) {\r\n        setupInput();\r\n        return;\r\n      }\r\n      await moveDown();\r\n      break;\r\n\r\n\r\n    case \"ArrowLeft\":\r\n      if (!canMoveLeft()) {\r\n        setupInput();\r\n        return;\r\n      }\r\n      await moveLeft();\r\n      break;\r\n\r\n\r\n    case \"ArrowRight\":\r\n      if (!canMoveRight()) {\r\n        setupInput();\r\n        return;\r\n      }\r\n      await moveRight();\r\n      break;\r\n\r\n\r\n    default:\r\n      setupInput();\r\n      return;\r\n  }\r\n\r\n\r\n  grid.cells.forEach(cell => {\r\n    let newMax = cell.mergeTiles(MAX_TILE);\r\n    if (typeof newMax == \"number\"){\r\n      MAX_TILE = newMax;\r\n    }\r\n  });\r\n\r\n\r\n  if (!(endGameBoard.classList.contains(hiddenClass))) {\r\n    endGameScoreUpdate();\r\n    return;\r\n  }\r\n\r\n  const newTile = new Tile(gameBoard);\r\n  MAX_TILE = Math.max(MAX_TILE, newTile.value);\r\n  maxtile.innerHTML = `Max tile: ${MAX_TILE}`;\r\n  grid.randomEmptyCell().tile = newTile;\r\n\r\n  touches[0].length = 0;\r\n  touches[1].length = 1;\r\n\r\n\r\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\r\n    newTile.waitForTransition(true).then(() => {\r\n      endGame(false);\r\n    })\r\n  } else {\r\n    setupInput();\r\n  }\r\n}\r\n\r\nconst moveUp = () => {\r\n  slideTiles(grid.cellsByColumn);\r\n}\r\n\r\nconst moveLeft = () => {\r\n  slideTiles(grid.cellsByRow);\r\n}\r\n\r\nconst moveDown = () => {\r\n  slideTiles(grid.cellsByColumn.map(column => [...column].reverse()));\r\n}\r\n\r\nconst moveRight = () => {\r\n  slideTiles(grid.cellsByRow.map(row => [...row].reverse()));\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst slideTiles = (cells) => {\r\n  return Promise.all(\r\n\r\n    cells.flatMap(group => {\r\n      const promises = [];\r\n      for (let i = 1; i < group.length; i++) {\r\n        const cell = group[i];\r\n        if (cell.tile == null) continue;\r\n        let lastValidCell;\r\n        for (let j = i - 1; j >= 0; j--) {\r\n          const moveToCell = group[j];\r\n          if (!moveToCell.canAccept(cell.tile)) break;\r\n          lastValidCell = moveToCell;\r\n        }\r\n\r\n        if (lastValidCell != null) {\r\n          promises.push(cell.tile.waitForTransition());\r\n          if (lastValidCell.tile != null) {\r\n            lastValidCell.mergeTile = cell.tile;\r\n          } else {\r\n            lastValidCell.tile = cell.tile;\r\n          }\r\n          cell.tile = null;\r\n        }\r\n      }\r\n      return promises;\r\n    }))\r\n}\r\n\r\n\r\nconst canMoveUp = () => {\r\n  return canMove(grid.cellsByColumn);\r\n}\r\n\r\nconst canMoveDown = () => {\r\n  return canMove(grid.cellsByColumn.map(column => [...column].reverse()));\r\n}\r\n\r\nconst canMoveLeft = () => {\r\n  return canMove(grid.cellsByRow);\r\n}\r\n\r\nconst canMoveRight = () => {\r\n  return canMove(grid.cellsByRow.map(row => [...row].reverse()));\r\n}\r\n\r\nconst canMove = cells => {\r\n  return cells.some(group => {\r\n    return group.some((cell, index) => {\r\n      if (index == 0) return false;\r\n      if (cell.tile == null) return false;\r\n      const moveToCell = group[index - 1];\r\n      return moveToCell.canAccept(cell.tile);\r\n    })\r\n  })\r\n}\r\n","import {endGame} from \"./EndgameHandler\";\r\nimport {title, baseNumber, maxtile, maxCellFactor} from \"./main\";\r\nimport {MAX_TILE} from \"./InputHandler\";\r\n\r\nexport let SCORE = 0;\r\nconst scoreElement = document.getElementById(\"score\");\r\n\r\nexport default class Cell {\r\n  #cellElement\r\n  #x\r\n  #y\r\n  #tile\r\n  #mergeTile\r\n\r\n  constructor(cellElement, x, y) {\r\n    this.#cellElement = cellElement;\r\n    this.#x = x;\r\n    this.#y = y;\r\n  }\r\n\r\n  get x() {\r\n    return this.#x;\r\n  }\r\n\r\n  get y() {\r\n    return this.#y;\r\n  }\r\n\r\n  get tile(){\r\n    return this.#tile;\r\n  }\r\n\r\n  get mergeTile() {\r\n    return this.#mergeTile;\r\n  }\r\n\r\n  set mergeTile(value) {\r\n    this.#mergeTile = value;\r\n    if (value == null) return;\r\n    this.#mergeTile.x = this.#x;\r\n    this.#mergeTile.y = this.#y;\r\n  }\r\n\r\n  set tile (value){\r\n    this.#tile = value;\r\n    if (value == null) return;\r\n    this.#tile.x = this.#x;\r\n    this.#tile.y = this.#y;\r\n  }\r\n\r\n  canAccept(tile) {\r\n    return (this.tile == null ||\r\n      (this.mergeTile == null && this.tile.value === tile.value));\r\n  }\r\n\r\n  mergeTiles(maxTileValue) {\r\n    if(this.mergeTile == null || this.tile == null) return;\r\n    this.tile.value = this.tile.value + this.mergeTile.value;\r\n    let newMaxTileValue = Math.max(maxTileValue, this.tile.value);\r\n    maxtile.innerHTML = `Max tile: ${newMaxTileValue}`;\r\n    if (typeof this.tile.value == \"number\"){\r\n      updateScore(this.tile.value);\r\n    }\r\n\r\n    if (this.tile.value == 1024 * baseNumber * maxCellFactor){\r\n      endGame(true);\r\n    }\r\n\r\n    this.mergeTile.remove();\r\n    this.mergeTile = null;\r\n\r\n    return newMaxTileValue;\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\nconst updateScore = value => {\r\n  SCORE = SCORE + value;\r\n  scoreElement.innerHTML = `Score:  ${SCORE}`;\r\n}\r\n\r\nconst updateMaxtile = () => {\r\n\r\n}\r\n","import Cell from \"./Cell\";\r\nimport {gridSize, cellSize} from \"./main\";\r\n\r\n\r\nconst cellGap = 2;\r\n\r\n\r\n\r\nexport default class Grid {\r\n  #cells\r\n\r\n\r\n  constructor(gridElement, gridSize) {\r\n\r\n    gridElement.style.setProperty(\"--grid-size\", gridSize);\r\n    gridElement.style.setProperty(\"--cell-size\", `${cellSize}vmin`);\r\n    gridElement.style.setProperty(\"--cell-gap\", `${cellGap}vmin`);\r\n\r\n\r\n    /* Creates the array of cell divs and maps into array of Cell objects */\r\n    this.#cells = createCellElement(gridElement, gridSize)\r\n      .map((el, index) => {\r\n        return new Cell(\r\n          el,\r\n          index % gridSize,\r\n          Math.floor(index / gridSize));\r\n      })\r\n\r\n  }\r\n\r\n  get cellsByColumn() {\r\n    return this.#cells.reduce((cellGrid, cell) => {\r\n      cellGrid[cell.x] = cellGrid[cell.x] || []\r\n      cellGrid[cell.x][cell.y] = cell;\r\n      return cellGrid;\r\n    }, [])\r\n  }\r\n\r\n  get cellsByRow() {\r\n    return this.#cells.reduce((cellGrid, cell) => {\r\n      cellGrid[cell.y] = cellGrid[cell.y] || []\r\n      cellGrid[cell.y][cell.x] = cell;\r\n      return cellGrid;\r\n    }, [])\r\n  }\r\n\r\n  get cells() {\r\n    return this.#cells;\r\n  }\r\n\r\n  get #emptyCells() {\r\n    return this.#cells.filter(cell => cell.tile == null);\r\n  }\r\n\r\n\r\n  randomEmptyCell() {\r\n    const randomIndex = Math.floor(Math.random() * this.#emptyCells.length);\r\n    return this.#emptyCells[randomIndex];\r\n  }\r\n}\r\n\r\n\r\nconst createCellElement = (gridElement, gridSize) => {\r\n  const cells = [];\r\n\r\n  for (let i = 0; i < gridSize * gridSize; i++) {\r\n\r\n    const cell = document.createElement(\"div\");\r\n    cell.classList.add(\"cell\");\r\n    cell.setAttribute(\"id\", \"cell\");\r\n    cells.push(cell);\r\n    gridElement.append(cell);\r\n\r\n  }\r\n  return cells;\r\n}\r\n","import {rangeInput, bubble, settingsBoard, tapToStart, openSettingsButton, hiddenClass} from \"./main\";\r\n\r\n\r\nexport const setRangeBubble = () => {\r\n\r\n  bubble.innerHTML = rangeInput.value;\r\n  const calcPositionX = (rangeInput.offsetWidth / 10) * rangeInput.value - (rangeInput.offsetWidth / 10) + 4;\r\n  bubble.style.left = `${calcPositionX}px`;\r\n}\r\n\r\n\r\nexport const toggleSettingBoard = () => {\r\n\r\n  settingsBoard.classList.toggle(hiddenClass);\r\n  tapToStart.classList.toggle(hiddenClass);\r\n  openSettingsButton.classList.toggle(hiddenClass);\r\n\r\n}\r\n","import Grid from \"./Grid\";\r\nimport Cell from \"./Cell\";\r\nimport Tile from \"./Tile\";\r\nimport {determineTouchDirection,\r\n        handlerInput,\r\n        gamestart} from \"./InputHandler\";\r\nimport {setRangeBubble, toggleSettingBoard} from \"./Settings\";\r\nimport {toggleDarkMode} from \"./Darkmode\";\r\n\r\n\r\nexport const body = document.getElementById(\"body\");\r\nexport const nav = document.getElementById(\"nav\");\r\nconst darktheme = document.querySelector(\"#darktheme\");\r\nexport const main = document.getElementById(\"main\");\r\nexport const title = document.getElementById(\"title\");\r\nexport const gameBoard = document.getElementById(\"game-board\");\r\nconst radioGridButtons = Array.from(document.querySelectorAll('input[name=\"gridSize\"]'));\r\nconst baseNumberInput = Array.from(document.querySelectorAll('input[name=\"baseNumber\"]'));\r\nconst darkModeToggle = document.getElementById(\"darkmode\");\r\nexport const rangeInput = document.getElementById('rangeInput');\r\nexport const bubble = document.getElementById('rangeBubble');\r\nexport const openSettingsButton = document.getElementById('openSettings');\r\nconst closeSettingsButton = document.getElementById('closeSettings');\r\nexport const tapToStart = document.getElementById('tapToStart');\r\nexport const settingsBoard = document.getElementById('settings-board');\r\nexport const starterBoard = document.getElementById('starter-board');\r\nconst score = document.getElementById(\"score\");\r\nexport const maxtile = document.getElementById(\"maxtile\");\r\nexport const navData = document.getElementById(\"nav__data\");\r\nexport const tile = document.getElementById(\"tile\");\r\nexport const endGameBoard = document.getElementById(\"endgame__board\");\r\nexport const endGameTitle = document.getElementById(\"endgame__title\");\r\nexport const endgameScore = document.getElementById(\"endgame__score\");\r\nexport const endgameButton = document.getElementById(\"endgame__button\");\r\n\r\nexport const hiddenClass = \"hidden\";\r\nexport const backgroundDM = \"background--dark-mode\";\r\nexport const textDM = \"text--dark-mode\";\r\nexport const elevation1DM = \"elevation1--dark-mode\";\r\nexport const elevation2DM = \"elevation2--dark-mode\";\r\n\r\nexport let grid = '';\r\n\r\nexport let gridSize = 4;\r\nexport let cellSize;\r\nif (window.screen.width > 1024){\r\n  cellSize = 15;\r\n} else {\r\n  cellSize = 18;\r\n}\r\nexport let baseNumber = 2\r\nexport let maxCellFactor = 1;\r\n\r\n\r\n\r\n/* Open settings board */\r\nopenSettingsButton.addEventListener(\"click\", function () {\r\n  toggleSettingBoard();\r\n  setRangeBubble();\r\n});\r\n\r\n\r\n/* Close settings board */\r\ncloseSettingsButton.addEventListener(\"click\", toggleSettingBoard);\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* Start the game when clicking */\r\ntapToStart.addEventListener(\"click\", function () {\r\n  grid = gamestart();\r\n  setupInput();\r\n  mobileSetupInput();\r\n})\r\n\r\n\r\n/* Starts the game when pressing Space button */\r\nwindow.addEventListener(\"keyup\", e => {\r\n  if (e.code == \"Space\" || e.code == \"Enter\"){\r\n    gamestart();\r\n    setupInput();\r\n    mobileSetupInput();\r\n  }\r\n});\r\n\r\n\r\n/* Update value and move slider thumb */\r\nrangeInput.addEventListener(\"input\", ()=>{\r\n    bubble.innerHTML = rangeInput.value;\r\n    const calcPositionX1 = rangeInput.offsetWidth / 10 * rangeInput.value - rangeInput.offsetWidth / 10 + 4;\r\n    bubble.style.left = `${calcPositionX1}px`;\r\n    baseNumber = parseInt(rangeInput.value);\r\n    title.innerHTML = 1024 * baseNumber * maxCellFactor;\r\n});\r\n\r\n\r\n/* Handle grid size input */\r\nfor (let radio of radioGridButtons){\r\n  radio.addEventListener(\"click\", e => {\r\n    gridSize = radio.value;\r\n    if (radio.value == 3){\r\n      gridSize = 3;\r\n      if (window.screen.width > 1024){\r\n        cellSize = 18;\r\n      } else {\r\n        cellSize = 24;\r\n      }\r\n      maxCellFactor = 0.125;\r\n      title.innerHTML = 1024 * baseNumber * maxCellFactor;\r\n    } else if (radio.value == 4){\r\n      gridSize = 4;\r\n      if (window.screen.width > 1024){\r\n        cellSize = 15;\r\n      } else {\r\n        cellSize = 18;\r\n      }\r\n      maxCellFactor = 1;\r\n      title.innerHTML = 1024 * baseNumber * maxCellFactor;\r\n    } else if (radio.value == 5){\r\n      gridSize = 5;\r\n      if (window.screen.width > 1024){\r\n        cellSize = 11;\r\n      } else {\r\n        cellSize = 14;\r\n      }\r\n      maxCellFactor = 1;\r\n      title.innerHTML = 1024 * baseNumber * maxCellFactor;\r\n    }\r\n  });\r\n}\r\n\r\n\r\ndarkModeToggle.addEventListener(\"click\", toggleDarkMode);\r\n\r\n\r\n\r\n/* Listen for keydown events and then invoke handlerInput function */\r\nexport const setupInput = () => {\r\n  window.addEventListener(\"keydown\", handlerInput, {once: true});\r\n}\r\n\r\n/* Define array that tracks XY coordinates of touchstart and touchend events */\r\nexport var touches = [[], []];\r\n\r\n\r\nconst mobileSetupInput = () => {\r\n  /* Push XY coordinates of touchstart event */\r\n  window.addEventListener(\"touchstart\", function (ev) {\r\n    touches[0][0] = ev.changedTouches[0].screenX;\r\n    touches[1][0] = ev.changedTouches[0].screenY;\r\n  })\r\n\r\n  /* Push XY coordinates of touchend event, determine direction and invoke handlerInput function */\r\n  window.addEventListener(\"touchend\", function (ev) {\r\n    touches[0][1] = ev.changedTouches[0].screenX;\r\n    touches[1][1] = ev.changedTouches[0].screenY;\r\n    const direction = determineTouchDirection(touches);\r\n    handlerInput(direction);\r\n  })\r\n}\r\n","import {\r\n  body,\r\n  nav,\r\n  gameBoard,\r\n  starterBoard,\r\n  settingsBoard,\r\n  openSettingsButton,\r\n  endGameBoard,\r\n  endgameButton\r\n} from \"./main\";\r\nimport {\r\n  backgroundDM,\r\n  textDM,\r\n  elevation1DM,\r\n  elevation2DM\r\n} from \"./main\";\r\n\r\n\r\nexport const toggleDarkMode = () => {\r\n  body.classList.toggle(backgroundDM);\r\n  nav.classList.toggle(textDM);\r\n  gameBoard.classList.toggle(elevation1DM);\r\n  starterBoard.classList.toggle(textDM);\r\n  settingsBoard.classList.toggle(elevation1DM);\r\n  settingsBoard.classList.toggle(textDM);\r\n  openSettingsButton.classList.toggle(textDM);\r\n  endGameBoard.classList.toggle(elevation2DM);\r\n  endGameBoard.classList.toggle(textDM);\r\n  endgameButton.classList.toggle(elevation2DM);\r\n  endgameButton.classList.toggle(textDM);\r\n}\r\n"],"names":["$0e2414bb5f847d16$export$5599a367734a1c3","outcome","$54b47fc030b7b21e$export$1c4abf71ebb8148e","innerHTML","$54b47fc030b7b21e$export$25ac647f1e4b0707","classList","remove","$54b47fc030b7b21e$export$4d30c755dbc1e70c","$54b47fc030b7b21e$export$fbf952a8bedc93ed","$9370f090a1e03025$export$7509766df8e18689","$51c6b31e76ea7e02$var$tileColors","$51c6b31e76ea7e02$export$2e2bcd8739ae039","tileElement","x","y","value","constructor","tileContainer","Math","random","$54b47fc030b7b21e$export$5beb312b11e19bba","this","document","createElement","add","setAttribute","append","position","style","setProperty","v","textContent","power","log2","index","floor","$54b47fc030b7b21e$export$6d8204c2cb2e06b8","waitForTransition","animation","Promise","resolve","addEventListener","once","$95e1ba3328502cfe$var$grid","$95e1ba3328502cfe$var$MAX_TILE","$95e1ba3328502cfe$export$54ca4381f9d89cca","$54b47fc030b7b21e$export$7c446875c245e0f4","toggle","$54b47fc030b7b21e$export$ebc8055718a54a4a","$54b47fc030b7b21e$export$f22da7240b7add18","$54b47fc030b7b21e$export$8ef62fb9a0c2653b","$a781f2de18c05b26$export$2e2bcd8739ae039","$54b47fc030b7b21e$export$7c513ec27fcf70de","newTile","randomEmptyCell","tile","max","$54b47fc030b7b21e$export$dda2c0c8716643e","$95e1ba3328502cfe$export$b0beff8044cf7e8f","async","e","direction","key","$95e1ba3328502cfe$var$canMoveUp","$54b47fc030b7b21e$export$d95a543601b1","$95e1ba3328502cfe$var$moveUp","$95e1ba3328502cfe$var$canMoveDown","$95e1ba3328502cfe$var$moveDown","$95e1ba3328502cfe$var$canMoveLeft","$95e1ba3328502cfe$var$moveLeft","$95e1ba3328502cfe$var$canMoveRight","$95e1ba3328502cfe$var$moveRight","cells","forEach","cell","newMax","mergeTiles","contains","$54b47fc030b7b21e$export$a1912f4eb118cd0e","length","then","$95e1ba3328502cfe$var$slideTiles","cellsByColumn","cellsByRow","map","column","reverse","row","all","flatMap","group","promises","i","lastValidCell","j","moveToCell","canAccept","push","mergeTile","$95e1ba3328502cfe$var$canMove","some","$9370f090a1e03025$var$scoreElement","getElementById","$9370f090a1e03025$export$2e2bcd8739ae039","cellElement","maxTileValue","newMaxTileValue","$9370f090a1e03025$var$updateScore","$54b47fc030b7b21e$export$c5750ce308899cd4","gridElement","gridSize","$54b47fc030b7b21e$export$773ede0104c69021","$a781f2de18c05b26$var$createCellElement","el","reduce","cellGrid","emptyCells","filter","randomIndex","$3898b1e9cb54d7f4$export$ea321ad9e006eaa3","$54b47fc030b7b21e$export$7309ef198785dc50","$54b47fc030b7b21e$export$b8d6349bb298ff13","$54b47fc030b7b21e$export$32180ef41b15b513","$54b47fc030b7b21e$export$80e4b313e5e6b30d","querySelector","$54b47fc030b7b21e$export$fb184b623420d9be","$54b47fc030b7b21e$var$radioGridButtons","Array","from","querySelectorAll","$54b47fc030b7b21e$var$darkModeToggle","$54b47fc030b7b21e$export$c32fd19b834dfaba","$54b47fc030b7b21e$export$f5dbf5ce556e97fb","$54b47fc030b7b21e$var$closeSettingsButton","$54b47fc030b7b21e$export$b7ee9ba0992f7661","$54b47fc030b7b21e$export$9f78d49702ab410d","$54b47fc030b7b21e$export$bafb9528504df773","$54b47fc030b7b21e$export$b518db77a7766bd3","$54b47fc030b7b21e$export$f20e168a2e6ee672","$54b47fc030b7b21e$export$85fc379452d91af0","window","screen","width","calcPositionX","offsetWidth","left","$3898b1e9cb54d7f4$export$72b18747f662c338","$54b47fc030b7b21e$var$mobileSetupInput","code","calcPositionX1","parseInt","radio","ev","changedTouches","screenX","screenY","distanceX","distanceY","abs","$95e1ba3328502cfe$export$9f73362797656d58"],"version":3,"file":"index.56d9fff2.js.map"}